//** Api */
const mongoose = require('mongoose')
const {Schema} = mongoose
const ObjectId = mongoose.Types.ObjectId

const librarySchema = new Schema({
  title : {type : String, required : true},
  comments : [String]
})

const Library = mongoose.model('Library', librarySchema)

module.exports = function (app) {

  app.route('/api/books')
    .get(function (req, res){
      //response will be array of book objects
      //json res format: [{"_id": bookid, "title": book_title, "commentcount": num_of_comments },...]
      Library.find({},(err, data) => {
        if (err) {
          console.log(err)
        } else {
          const mapData = data.map(e => {
            return {
              _id : e._id,
              title : e.title,
              comments : e.comments,
              commentcount : e.comments.length
            }
          })
          res.json(mapData)
        }
        
      })
    })
    
    .post(function (req, res){
      let title = req.body.title;
      //response will contain new book object including atleast _id and title
      
      if(!title) {
        return res.send('missing required field title')
      }
      
      const library = new Library({ title : title })
      library.save((err, data) => {
        if(err || !data) {
          res.send('Error')
        } else {
          res.json({ _id : data._id, title : data.title})
        }
      })
        
    })
    
    .delete(function(req, res){
      //if successful response will be 'complete delete successful'
      Library.remove({}, (err, data) => {
        if(err) {
          console.log(err)
        } else {
          res.send('complete delete successful')
        }
      })
    });



  app.route('/api/books/:id')
    .get(function (req, res){
      let bookid = req.params.id;
      //json res format: {"_id": bookid, "title": book_title, "comments": [comment,comment,...]}
      Library.findById({ _id : bookid}, (err, data) => {
        if (err || !data) {
          res.send("no book exists")
        } else {
          res.json({
            _id : data._id,
            title : data.title,
            comments : data.comments,
            commentcount : data.comments.length
          })
        }

      })
    })
    
    .post(function(req, res){
      let bookid = req.params.id;
      let comment = req.body.comment;
      //json res format same as .get
      if(!comment) {
        res.send('missing required field comment')
        return
      }

      Library.findById(bookid, (err, data) => {
        if (!data){
          res.send('no book exists')
        } else {
          data.comments.push(comment)
          data.save((err, newData) => {
              res.json({
              _id : newData._id,
              title : newData.title,
              comments : newData.comments,
              commentcount : newData.comments.length
            })
          })
        }
      })
    })
    
    .delete(function(req, res){
      let bookid = req.params.id;
      //if successful response will be 'delete successful'
      Library.findByIdAndRemove({ _id : bookid }, (err, data) => {
        if (err || !data) {
          res.send('no book exists')
        }else {
          res.send('delete successful')
        }
      })
    });
};

/** Function Test */
const chaiHttp = require('chai-http');
const chai = require('chai');
const assert = chai.assert;
const server = require('../server');

chai.use(chaiHttp);
let bookID
suite('Functional Tests', function() {

  /*
  * ----[EXAMPLE TEST]----
  * Each test should completely test the response of the API end-point including response status code!
  */
  test('#example Test GET /api/books', function(done){
     chai.request(server)
      .get('/api/books')
      .end(function(err, res){
        assert.equal(res.status, 200);
        assert.isArray(res.body, 'response should be an array');
        if (!res.body[0]) {
          done();
        }
        assert.property(res.body[0], 'commentcount', 'Books in array should contain commentcount');
        assert.property(res.body[0], 'title', 'Books in array should contain title');
        assert.property(res.body[0], '_id', 'Books in array should contain _id');
        done();
      });
  });
  /*
  * ----[END of EXAMPLE TEST]----
  */

  suite("Routing tests", function () {
    suite(
      "POST /api/books with title => create book object/expect book object",
      function () {
        test("Test POST /api/books with title", function (done) {
          chai
            .request(server)
            .post("/api/books")
            .send({ title: "test-title" })
            .end(function (err, res) {
              assert.equal(res.status, 200);
              bookID = res.body._id;
              assert.equal(res.body.title, "test-title");
              done();
            });
        });

        test("Test POST /api/books with no title given", function (done) {
          chai
            .request(server)
            .post("/api/books")
            .send({})
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.equal(res.text, "missing required field title");
              done();
            });
        });
      }
    );

    suite("GET /api/books => array of books", function () {
      test("Test GET /api/books", function (done) {
        chai
          .request(server)
          .get("/api/books")
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.isArray(res.body, "it is an array");
            done();
          });
      });

      suite("GET /api/books/[id] => book object with [id]", function () {
        test("Test GET /api/books/[id] with id not in db", function (done) {
          chai
            .request(server)
            .get("/api/books/invalidID")
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.equal(res.text, "no book exists");
              done();
            });

          test("Test GET /api/books/[id] with valid id in db", function (done) {
            chai
              .request(server)
              .get("/api/books/" + bookID)
              .end(function (err, res) {
                assert.equal(res.status, 200);
                assert.equal(res.body.title, "test-title");
                done();
              });
          });
        });

        suite(
          "POST /api/books/[id] => add comment/expect book object with id",
          function () {
            test("Test POST /api/books/[id] with comment", function (done) {
              chai
                .request(server)
                .post("/api/books/" + bookID)
                .send({ comment: "test-comment" })
                .end(function (err, res) {
                  assert.equal(res.status, 200);
                  assert.equal(res.body.comments[0], "test-comment");
                  done();
                });
            });

            test("Test POST /api/books/[id] without comment field", function (done) {
              chai
                .request(server)
                .post("/api/books/" + bookID)
                .send({})
                .end(function (err, res) {
                  assert.equal(res.status, 200);
                  assert.equal(res.text, "missing required field comment");
                  done();
                });
            });

            test("Test POST /api/books/[id] with comment, id not in db", function (done) {
              chai
                .request(server)
                .post("/api/books/" + "invalidID")
                .send({ comment: "test-comment" })
                .end(function (err, res) {
                  assert.equal(res.status, 200);
                  assert.equal(res.text, "no book exists");
                  done();
                });
            });
          }
        );

        suite("DELETE /api/books/[id] => delete book object id", function () {
          test("Test DELETE /api/books/[id] with valid id in db", function (done) {
            chai
              .request(server)
              .delete("/api/books/" + bookID)
              .end(function (err, res) {
                assert.equal(res.status, 200);
                assert.equal(res.text, "delete successful");
                done();
              });
          });

          test("Test DELETE /api/books/[id] with  id not in db", function (done) {
            chai
              .request(server)
              .delete("/api/books/" + "invalidID")
              .end(function (err, res) {
                assert.equal(res.status, 200);
                assert.equal(res.text, "no book exists");
                done();
              });
          });
        });
      });
    });
  });
});
